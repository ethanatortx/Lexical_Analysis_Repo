Documentation for linked list class:

Template <class T>

T = type of data contained in the list's nodes


Member types
T 				value_type
T* 				pointer
T& 				refference
std::ptrdiff_t	difference_type


Member functions

linked_list()
	Default constructor; empty list; creates sentinel node

linked_list(const linked_list<T>&)
	Copy constructor; creates sentinel node; copies contents
	list parameter

inline bool operator==(const linked_list<T>&) const
	Compare this list against another and return true if
	they are identical

inline bool operator!=(const linked_list<T>&) const
	Compare this list against another and return true if
	they are different

linked_list<T>& operator=(const linked_list<T>&)
						 (linked_list<T>&&)
	Assignmend operator overload; both from constant pass by
	ref and from rvalue

linked_list<T>& operator+=(const linked_list<T>&)
						  (linked_list<T>&&)
	Append contents of the provided list to the end of
	this list

linked_list<T>::iterator operator[](int)
	Pass in integer and return an iterator pointing to
	that index on the graph

linked_list<T>::iterator at(int)
	Pass in integer and return an iterator pointing to
	that index on the graph

inline bool empty() const
	Check if the list contains any elements and returns false
	if it does contain any elements

inline T& front()
	   const T& front() const
	Return the value at the front of the list

inline T& back()
	   const T& back() const
	Return the value at the end of the list

inline iterator begin()
	Return an iterator pointing to the first term in the list

inline const_iterator begin() const
inline const_iterator cbegin() const
	Return a constant iterator pointing to the first term
	in the list

inline iterator end()
	Return an iterator pointing to the end of the list

inline const_iterator end() const
inline const_iterator cend() const
	Return a constant iterator pointing to the end of the list

void emplace(const T&, int)
			(const T&, iterator)
			(T&&, int)
			(T&&, iterator)
	Construct and emplace a node with the given data at the
	given position

inline void push_front(const T&)
					 (T&&)
	Construct and emplace node at the front of the list

inline void push_back(const T&)
				  (T&&)
	Construct and empalce node at the end of the list

void erase(int)
		  (iterator)
	Erase an element at the given position

void erase_range(int, int)
				(iterator, iterator)
	Erase all elements in a given range

inline void pop()
	Erase the node at the start of the list

void print()
	Print the list's contents to the console

void rotate(int)
		   (iterator)
	Reframe list so that the element at the given position
	is set to the head position (order of nodes unchanged)

void reverse()
	Reverse the list; head->tail, tail->head

inline void swap(linked_list<T>&)
	Swap contents with another list
